package com.flow.keyblue

fun charToKeycode(character: Char): Pair<Int, Int> {
    return when (character) {
        'a' -> Pair(0, 0x04)
        'A' -> Pair(1, 0x04)
        'b' -> Pair(0, 0x05)
        'B' -> Pair(1, 0x05)
        'c' -> Pair(0, 0x06)
        'C' -> Pair(1, 0x06)
        'd' -> Pair(0, 0x07)
        'D' -> Pair(1, 0x07)
        'e' -> Pair(0, 0x08)
        'E' -> Pair(1, 0x08)
        'f' -> Pair(0, 0x09)
        'F' -> Pair(1, 0x09)
        'g' -> Pair(0, 0x0a)
        'G' -> Pair(1, 0x0a)
        'h' -> Pair(0, 0x0b)
        'H' -> Pair(1, 0x0b)
        'i' -> Pair(0, 0x0c)
        'I' -> Pair(1, 0x0c)
        'j' -> Pair(0, 0x0d)
        'J' -> Pair(1, 0x0d)
        'k' -> Pair(0, 0x0e)
        'K' -> Pair(1, 0x0e)
        'l' -> Pair(0, 0x0f)
        'L' -> Pair(1, 0x0f)
        'm' -> Pair(0, 0x10)
        'M' -> Pair(1, 0x10)
        'n' -> Pair(0, 0x11)
        'N' -> Pair(1, 0x11)
        'o' -> Pair(0, 0x12)
        'O' -> Pair(1, 0x12)
        'p' -> Pair(0, 0x13)
        'P' -> Pair(1, 0x13)
        'q' -> Pair(0, 0x14)
        'Q' -> Pair(1, 0x14)
        'r' -> Pair(0, 0x15)
        'R' -> Pair(1, 0x15)
        's' -> Pair(0, 0x16)
        'S' -> Pair(1, 0x16)
        't' -> Pair(0, 0x17)
        'T' -> Pair(1, 0x17)
        'u' -> Pair(0, 0x18)
        'U' -> Pair(1, 0x18)
        'v' -> Pair(0, 0x19)
        'V' -> Pair(1, 0x19)
        'w' -> Pair(0, 0x1a)
        'W' -> Pair(1, 0x1a)
        'x' -> Pair(0, 0x1b)
        'X' -> Pair(1, 0x1b)
        'y' -> Pair(0, 0x1c)
        'Y' -> Pair(1, 0x1c)
        'z' -> Pair(0, 0x1d)
        'Z' -> Pair(1, 0x1d)
        '1' -> Pair(0, 0x1e)
        '!' -> Pair(1, 0x1e)
        '2' -> Pair(0, 0x1f)
        '@' -> Pair(1, 0x1f)
        '3' -> Pair(0, 0x20)
        '#' -> Pair(1, 0x20)
        '4' -> Pair(0, 0x21)
        '$' -> Pair(1, 0x21)
        '5' -> Pair(0, 0x22)
        '%' -> Pair(1, 0x22)
        '6' -> Pair(0, 0x23)
        '^' -> Pair(1, 0x23)
        '7' -> Pair(0, 0x24)
        '&' -> Pair(1, 0x24)
        '8' -> Pair(0, 0x25)
        '*' -> Pair(1, 0x25)
        '9' -> Pair(0, 0x26)
        '(' -> Pair(1, 0x26)
        '0' -> Pair(0, 0x27)
        ')' -> Pair(1, 0x27)
        ' ' -> Pair(0, 0x2c)
        '-' -> Pair(0, 0x2d)
        '_' -> Pair(1, 0x2d)
        '=' -> Pair(0, 0x2e)
        '+' -> Pair(1, 0x2e)
        '[' -> Pair(0, 0x2f)
        '{' -> Pair(1, 0x2f)
        ']' -> Pair(0, 0x30)
        '}' -> Pair(1, 0x30)
        '\\' -> Pair(0, 0x31)
        '|' -> Pair(1, 0x31)
        '~' -> Pair(1, 0x32)
        ';' -> Pair(0, 0x33)
        ':' -> Pair(1, 0x33)
        '\'' -> Pair(0, 0x34)
        '"' -> Pair(1, 0x34)
        '`' -> Pair(0, 0x35)
        ',' -> Pair(0, 0x36)
        '<' -> Pair(1, 0x36)
        '.' -> Pair(0, 0x37)
        '>' -> Pair(1, 0x37)
        '/' -> Pair(0, 0x38)
        '?' -> Pair(1, 0x38)
        else -> throw IllegalArgumentException("Character not supported")
    }
}
